snippet ic "print"
ic(${0:}.schema)
endsnippet

snippet plv "pl read_csv"
pl.read_csv('${1:file_name}',ignore_errors=${2:True},${3:skip_rows=${4:0}},
				${5:dtypes={${6:None}}},
)
endsnippet

snippet ple "pl read_excel"
pl.read_excel('${1:file_name}',${2:sheet_name='${3:None}}',
${4:read_csv_options=${5:{${6:'ignore_errors':${7:True},${8:'skip_rows':${9:0}},${10:'dtypes':${11:{${12:}}}}}}} }
)
endsnippet

snippet pde "pd read_excel"
pd.read_excel('${1:file_name}',${2:sheet_name='${3:None}}',
${4:header=${5:0}}, ${6:usecols='${7:None}}', ${8:skiprows=${9:0}}, 
)
endsnippet

snippet plq "pl read_sql from pandas"
from sqlalchemy import create_engine
import pandas as pd
conn = create_engine('mysql+pymysql://${1:root}:${2:1234}@${3:192.168.0.105}:${4:3306}/${5:search term}${6:?${7:charset=utf8}}')
sql_query = "select * from ${8:table_name}"
${9:df} = pl.from_pandas(pd.read_sql(sql_query, conn))

endsnippet


snippet plt "pl pivot_table"
${1:df}.pivot(index=${2:['${3:None}']},columns=${4:['${5:None}']},
				${6:values='${7:None}',aggregate_fn=${8:'sum'}},)
endsnippet

snippet plk "pl lookup"
${1:df}.join(${2:df2},${3:how='${4:left}'},${5:on='${6:None}',${7:left_on='${8:None}'},${9:right_on='${10:None}'},${11:suffix='${12:_x}'}})
endsnippet

snippet tc "pl write_csv"
${1:df}.write_csv('${2:file_name}.csv')
endsnippet

snippet te "pl write_excel"
${1:df}.to_pandas().to_excel('${2:file_name}.xlsx',${3:sheet_name='${4:None}'},${5:index=${6:False}})
endsnippet

snippet tq "pl to sql"
pd.io.sql.to_sql(${1:df}.to_pandas(), '${2:广告业绩}', con=${3:conn}, schema='${4:search term}', if_exists='${5:append}',
                     index=False)
conn.dispose()

endsnippet


snippet plfd "DataFrame frome pandas"
pl.from_pandas(pd.read_excel('${1:file_name}.xlsx',${2:sheet_name='${3:None}}',
${4:header=${5:0}}, ${6:usecols=${7:'None'}}, ${8:skiprows=${9:0}}, 
))
endsnippet

snippet plc "pl withcolumns"
${1:df}.with_columns([${2:pl.col('${3:column_name}').${4:cast}}.${5:alias('${6:column_name}')},
${7:pl.col('${8:column_name}').${9:cast}}.${10:alias('${11:column_name}')},
${12:pl.col('${13:column_name}').${14:cast}}.${15:alias('${16:column_name}')},
])
endsnippet

snippet plcl "empty DataFrame"
${1:df}.cleared()
endsnippet

snippet fcsi "cast sting to int"
def cast_str_to_${1:int}(data, col_name):
    return data.with_column(pl.col(col_name).cast(${2:pl.Int64}, strict=${3:False}))
endsnippet

snippet plg "pl groupby"
${1:df}.groupby(['${2:col_name_1}', '${3:col_name_2}']).agg([pl.col('${4:col_n}').${5:sum()},
pl.col('${6:col_n}').${7:sum()},
pl.col('${8:col_n}').${9:sum()},
pl.col('${9:col_n}').${10:sum()},
]).${11:sort(${11:by='${13:col_name}'}}, ${14:reverse=${15:True}})
endsnippet

snippet plf "pl filter"
${1:df}.filter(${2:(pl.col('${3:col_name}')${4: ${5:==}}${6: ${7:None}})}
& ${8:(pl.col('${9:col_name}')${10: ${11:==}}${12: ${13:None}})}
& ${14:(pl.col('${15:col_name}')${16: ${17:==}}${18: ${19:None}})}
& ${20:(pl.col('${21:col_name}')${22: ${23:==}}${24: ${25:None}})}
& ${26:(pl.col('${27:col_name}')${28: ${29:==}}${30: ${31:None}})}
& ${32:(pl.col('${33:col_name}')${34: ${35:==}}${36: ${37:None}})}
)

endsnippet

snippet plrn "pl rename"
${1:df}.rename({${2:'${3:old_name}':'${4:new_name}'}})
endsnippet

snippet plap "pl append"
${1:df}.vstack(${2:df2})
endsnippet


snippet plvp "pl columns append"
${1:df}.hstack(${2:df2})
endsnippet



snippet plfdx "pl find index"
${1:df}.find_idx_by_name(${2:'${3:col_name}'})
endsnippet

snippet plnc "pl new column"
${1:pl.Config.with_columns_kwargs = True} # enable new column creation
${2:df2}=${3:df}.with_columns(
${4:pl.col('${5:col_name}').${6:cast}.${7:alias('${8:col_name}')},}
${9:${10:new_col}=pl.col('${11:col_name}')${12:+}pl.col${13:('${14:col_name}')},}
${15:${16:new_col}=pl.col('${17:col_name}')${18:+}pl.col${19:('${20:col_name}')},}
${21:${22:new_col}=pl.col('${23:col_name}')${24:+}pl.col${25:('${26:col_name}')},})
endsnippet

snippet plsv "pl set value column"
${1:df}[[i for i in range(${2:df}.height)], '${3:col_name}']=${5:None}
endsnippet
		

snippet plse "pl select columns"
${1:df}.select([${2:pl.col('${3:col_name}').${4:cast}}.${5:alias('${6:col_name}')},
${7:pl.col('${8:col_name}').${9:cast}}.${10:alias('${11:col_name}')},
${12:pl.col('${13:col_name}').${14:cast}}.${15:alias('${16:col_name}')},
])
endsnippet

snippet plidx "pl inset index"
${1:df}.with_row_count('${2:row_nr}',${3:0} )
endsnippet

snippet main "main getopt"
import sys
import getopt
def main(argv):
    ${1:inputfile} = ''
	${2:outputfile} = ''
	<++>
    try:
        opts, args = getopt.getopt(argv[1:], "ha:${3:i}:${4:o}:<++>", ["ifile=", "ofile=",<++>])
    except getopt.GetoptError:
        print('test.py -i <inputfile> -o <outputfile> <++>')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            useage(argv[0])
            sys.exit()
        elif opt in ("-i", "--ifile"):
            ${5:inputfile} = arg
        elif opt in ("-o", "--ofile"):
            ${6:outputfile} = arg
			<++>
    print('输入的文件为：', inputfile)
    print('输出的文件为：', outputfile)
	<++>
if __name__ == "__main__":
    main(sys.argv)

endsnippet

snippet fpt "get payment time"
def Get_TimePayments(str_time):
    if not isinstance(str_time, str):
        str_time = str(str_time)
    time = str_time.replace('PST', "").strip()
    time = str_time.replace('PDT', "").strip()
    tage_list = time.split(':')
    th_list = tage_list[0].split(' ')  # 得到小
    # print(th_list)
    th = th_list[-1]
    if 'AM'.upper() in time.upper():
        if int(th) >= 12:
            th = 0
            # 需要： 12： 替换 00： 防止替换掉了日期
            time = time.replace(' 12:', ' 00:').strip()
        time = str(time).replace('AM', "").strip()
    elif 'PM'.upper() in time.upper():
        if int(str(th)) < 12:
            th_list = th_list[:-1]  # 移除倒数第一
            tage_list = tage_list[1:]  # 去掉第一个
            th = int(th) + 12
            th_list.append(str(th))
            tage_str = ' '.join(th_list)
            tage_list.insert(0, tage_str)
            time = ':'.join(tage_list)
        time = str(time).replace('PM', "").strip()
    time = time.replace('PST', "").strip()
    time = time.replace('PDT', "").strip()
    # format time "%Y-%m-%d %H:%M:%S"
    time = datetime.datetime.strptime(time, '%b %d, %Y %H:%M:%S')
    # time = datetime.datetime.strftime(time, '%Y-%m-%d %H:%M:%S')
    time = datetime.datetime.strftime(time, '%Y-%m-%d')

    result = [time, int(th)]
    return result
# print(Get_TimePayments("Mar 12, 2021 1:26:31 PM PST"))

endsnippet

snippet pld "pl drop duplicate data"
${1:df}.unique(maintain_order=${2:True}, subset=${3:['${4:date/time}']}, keep='${5:last}')
endsnippet


snippet plpt "pl convert payment time"
${1:df}.with_column(pl.col('${2:date/time}')${3:.str.replace('${4: P\wT}', '${5:}')}
                     ${6:.str.strip()}
                     .str.strptime(pl.${6:Datetime}, "${7:%b %e, %Y %r}", strict=${8:False})${9:.dt.hour()}
                     )
endsnippet

snippet plsp "pl split add columns"
${1:df2}.with_columns([pl.col('${2:sku}').str.splitn("${3:-}", ${4:3})
                        .struct.rename_fields(['${5:fsku}', '${6:color}', '${7:size}'])
                        .alias('${8:sku_felid}'),
                        ]).unnest('${9:sku_felid}')
endsnippet

snippet plaf "pl apply function"
${1:df}.pipe(${2:cast_str_to_int}, '${3:col_name}')

endsnippet

snippet class "define class"
class ${1:ReadSheet}:
    def __init__(self, ${2:workbook}=${3:None}, ${4:strSheetName}=${5:None}, ${6:strValidDataTitle}=${7:None}, ${8:strKeyword}=${9:None}, ${10:filename}=${11:None}):
        self.${12:m_ws} = ${13:None}
        self.m_wb = None

        self.${14:m_SheetName} = ${15:str("")}
        ${16:self.m_SheetName = strSheetName}

    def ${17:load}(self, ${18:filename}):
        ${19:pass}
        return self.${20:__LoadSheetData()}

    def __LoadSheetData(self):
        ${21:pass}
        return
endsnippet
